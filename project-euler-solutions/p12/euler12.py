
"""
Copyright Matt DeMartino (Stravajiaxen)
Licensed under MIT License -- do whatever you want with this, just don't sue me!

This code attempts to solve Project Euler (projecteuler.net)
Problem #12 Highly divisible triangular number

The sequence of triangle numbers is generated by adding the natural numbers.
So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
"""
import warnings
import time

# Using the generator pattern (an iterable)
class TriangleNumbers(object):


    def __init__(self):
        self.num = 1
        self.tot = 0


    def __iter__(self):
        return self


    # Python 3 compatibility
    def __next__(self):
        self.tot += self.num
        self.num += 1
        return self.tot

def divisors(num):
    if num < 9:
        warnings.warn("This isn't correct for this number, but unneeded for this problem")
        return [2]  # This is not true! But it doesn't matter for this problem

    max_num = int(num ** 0.5)
    divs = []
    for i in range(1, max_num):
        if num % i == 0:
            divs.append(i)
    return set(divs + [num/div for div in divs])

def main():
    for num in TriangleNumbers():
        divs = divisors(num)
        if len(divs) >= 500:
            print(num, divs)
            break

    
    
if __name__ == "__main__":
    start_time = time.time()
    main()
    elapsed_time = time.time() - start_time
    print("Elapsed Time: ", elapsed_time)
